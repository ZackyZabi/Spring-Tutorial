1
00:00:00,140 --> 00:00:02,090
In this lecture, you will create a Spring

2
00:00:02,110 --> 00:00:04,430
MVC Maven web application.

3
00:00:04,600 --> 00:00:09,560
You are going to use it in the next few lectures to see the Maven Spring MVC end to end.

4
00:00:10,360 --> 00:00:16,880
Get started by going to Eclipse, File menu, new -> Maven project.

5
00:00:16,880 --> 00:00:20,590
We are going to create a Maven web application this time. So click on the next,

6
00:00:20,630 --> 00:00:24,650
don't select the default option which is maven-archetype-quickstart.

7
00:00:24,650 --> 00:00:29,910
This is for standalone projects. But we are creating a web application, so scroll down.

8
00:00:30,050 --> 00:00:38,540
Go to maven-archetype-webapp, maven hyphen archetype hyphen webapp.

9
00:00:38,540 --> 00:00:45,160
Next, Group Id should be com.bharath.spring.

10
00:00:45,200 --> 00:00:54,980
That is what we have been using. And the Artifact Id is springmvc. springmvc for model view controller

11
00:00:55,550 --> 00:01:00,360
Finish. That will create a maven project for us. The very first step

12
00:01:00,400 --> 00:01:03,840
as always is to open up the pom.xml.

13
00:01:03,920 --> 00:01:04,900
There is an error.

14
00:01:05,140 --> 00:01:07,570
I will discuss about it and we'll fix it in a second.

15
00:01:08,650 --> 00:01:12,220
Go to pom, open the springorm pom.

16
00:01:15,950 --> 00:01:19,090
Go to the last tab, the pom.xml, maximize it.

17
00:01:19,090 --> 00:01:23,870
Copy from properties all the way to the build section.

18
00:01:24,190 --> 00:01:26,970
Come back to the springmvc/pom.

19
00:01:27,040 --> 00:01:35,340
There is no properties here, so start from dependencies. Go all the way till end of build. Paste it, do a

20
00:01:35,680 --> 00:01:42,190
control+shift+f to format. We have the compiler plugin. Get rid of all the dependencies and leave

21
00:01:42,220 --> 00:01:49,690
just one, because for Spring MVC all we need is one dependency and Maven will pull all the other dependencies

22
00:01:49,720 --> 00:01:58,050
transitively. I have the spring-core here, change it to spring-webmvc.

23
00:01:58,260 --> 00:02:08,440
It is spring hyphen webmvc and we are using the version 4.3.6. Save it, minimize it.

24
00:02:08,560 --> 00:02:17,020
This error here is because, if you see the error, go to src -> main -> webapp, open the index.jsp which has

25
00:02:17,020 --> 00:02:19,270
the error message. Point at the error,

26
00:02:19,660 --> 00:02:27,820
it says the superclass javax.servlet.http.HttpServlet was not found on the Java Build Path.

27
00:02:28,930 --> 00:02:34,010
So it needs the servlet class which is not there on the class path. We can fix it in two ways.

28
00:02:34,090 --> 00:02:41,490
One, we can add the servlet dependencies to the Maven pom.xml or an other simple way,

29
00:02:41,500 --> 00:02:47,970
right click on the project, go to properties. In here on the top corner, top left,

30
00:02:48,010 --> 00:02:56,110
search for target, Targeted Runtimes. Select it. And on the right side you will see Apache Tomcat which you

31
00:02:56,110 --> 00:03:00,040
would have installed and configured in Eclipse from the software setup section.

32
00:03:00,070 --> 00:03:01,830
If not, please do that.

33
00:03:02,170 --> 00:03:03,870
Once you do that you will see it here.

34
00:03:04,030 --> 00:03:07,400
Select that and hit OK.

35
00:03:07,770 --> 00:03:09,340
And that error will go away.

36
00:03:09,340 --> 00:03:14,570
This is a different error now. You don't see an error on index.jsp anymore because Tomcat has the servlet

37
00:03:14,980 --> 00:03:18,430
dependencies and that error is gone.

38
00:03:18,430 --> 00:03:20,700
This is because we haven't updated our project.

39
00:03:20,710 --> 00:03:27,160
So right click, go do a Maven -> Update Project. Every time we change the pom.xml,

40
00:03:27,240 --> 00:03:34,990
we should update our Maven project. Now it does an updation and all the errors are gone.

41
00:03:34,990 --> 00:03:38,780
The structure of the web application, maven web application is different.

42
00:03:38,860 --> 00:03:45,910
If you notice, we have Java resources which has src/main/resources. It does not have a

43
00:03:45,920 --> 00:03:51,150
src/main/java. We'll create that folder. And under src, if you go here,

44
00:03:51,290 --> 00:03:55,360
it has a webapp under which we have WEB-INF which has the

45
00:03:55,360 --> 00:04:00,470
web.xml which is the deployment descriptor file. And all our JSPs and HTMLs

46
00:04:00,540 --> 00:04:03,120
can either directly go under webapp like this.

47
00:04:03,110 --> 00:04:05,000
Here we have index.jsp.

48
00:04:05,210 --> 00:04:14,810
Or we can also put them under WEB-INF. Let's create a src/main/java folder here so that

49
00:04:14,810 --> 00:04:24,690
we can put our controllers. Right click, say new, not Source Folder, go to Other, seach for folder. Folder,

50
00:04:24,840 --> 00:04:29,890
Next. You should go under src/main.

51
00:04:29,920 --> 00:04:35,860
That is where we want it. And the folder name should be Java, Finish.

52
00:04:35,890 --> 00:04:41,170
This is the structure we need to follow in Maven. Any source code should go under src/main/java.

53
00:04:41,330 --> 00:04:45,970
Any configuration files, we can put them under src/main/resources.

54
00:04:45,970 --> 00:04:48,440
So in this lecture, we have successfully created a Spring

55
00:04:48,440 --> 00:04:55,390
MVC Maven web application and also updated the dependencies and got rid of any errors that we had.

