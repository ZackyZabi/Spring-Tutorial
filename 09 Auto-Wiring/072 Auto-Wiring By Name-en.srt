1
00:00:00,230 --> 00:00:04,090
In this lecture, you will learn how to do Autowiring by name.

2
00:00:04,200 --> 00:00:11,190
So far, you have learnt how to do it by type. Simply change this attribute value from byType to byName,

3
00:00:11,220 --> 00:00:14,820
n capital and that's it.

4
00:00:14,880 --> 00:00:22,080
If you go back to the employee, byName works by the name of the object or name of the reference variable

5
00:00:22,080 --> 00:00:23,420
that we have defined here.

6
00:00:23,550 --> 00:00:31,640
In this case it is address. And in the config file the name of the bean should be address for it to work.

7
00:00:31,640 --> 00:00:33,980
Let's run our test and see what happens.

8
00:00:35,040 --> 00:00:37,090
And everything works as expected.

9
00:00:37,090 --> 00:00:42,850
This time the Spring container, the way it searches is, it comes to this configuration file, it uses this configuration

10
00:00:42,850 --> 00:00:43,400
file.

11
00:00:43,720 --> 00:00:51,720
As soon as it sees autowiring here, byName, it goes to the Employee which is the bean it is trying

12
00:00:51,720 --> 00:00:52,670
to create,

13
00:00:52,880 --> 00:00:58,310
searches for all the dependencies which are objects. In this case it is only the address.

14
00:00:58,440 --> 00:01:02,610
It will take the name of that variable because we have configured it byName.

15
00:01:03,600 --> 00:01:11,100
And it will go back to the configuration file and search for beans with name as the same name as the

16
00:01:11,160 --> 00:01:12,900
reference variable.

17
00:01:12,900 --> 00:01:15,830
It will not search for the type, for the class this time.

18
00:01:15,890 --> 00:01:23,040
Simply it will search for the matching name of the variable inside that object.

19
00:01:23,610 --> 00:01:33,200
Let's get rid of this, let's delete this dependency. Do a control+x, save it. Run it and it'll be null.

20
00:01:33,280 --> 00:01:40,480
Similar to byType, in case of byName as well, the Spring container will inject a null if it can't find

21
00:01:40,480 --> 00:01:42,310
the bean.

22
00:01:42,310 --> 00:01:44,160
Let's try to duplicate it.

23
00:01:44,590 --> 00:01:51,370
Copy the same bean twice with the same exact name.

24
00:01:51,400 --> 00:01:56,400
The type doesn't matter now, what it looks for is the name.

25
00:01:56,500 --> 00:02:05,490
So save it. We have two beans with the same name. Run it and we see an exception very similar to byType.

26
00:02:05,500 --> 00:02:13,520
It says Configuration problem: Bean name 'address' is already used in this <beans> element. So we get a

27
00:02:13,550 --> 00:02:17,880
duplicate bean definition parsing exception.

28
00:02:18,310 --> 00:02:22,150
We can't have two beans with the same name. Let's change one of their names.

29
00:02:22,150 --> 00:02:25,030
Let's make one of them address1.

30
00:02:25,220 --> 00:02:31,350
Save it, rerun the test and this time it works.

31
00:02:31,350 --> 00:02:37,230
So the spring container will start searching for the bean named address.

32
00:02:37,260 --> 00:02:38,360
It will come here.

33
00:02:38,370 --> 00:02:43,560
This is not the one. Although the type is same the Spring container doesn't care about the type this time. It's

34
00:02:43,560 --> 00:02:50,220
byName. It comes to the next bean, it finds this address and it will immediately instantiate that object

35
00:02:50,490 --> 00:02:52,770
and it'll inject it into Employee.

36
00:02:53,010 --> 00:02:57,000
So you have learnt both byName as well as byType. byName,

37
00:02:57,000 --> 00:03:04,110
we can have the same bean defined multiple times but we have to give different names.

38
00:03:04,110 --> 00:03:10,020
And when we do injection the Spring container will use the name of the reference variable and

39
00:03:10,020 --> 00:03:12,580
searches for that bean with that name.

