1
00:00:00,090 --> 00:00:06,240
A last and final step is to create a best class and see the dependency injection through interfaces

2
00:00:06,390 --> 00:00:08,550
can grab an earlier test.

3
00:00:08,550 --> 00:00:17,670
I'm going to create one from scratch new class test with the main matter.

4
00:00:17,720 --> 00:00:25,710
The first step in test it the to do and create application context which is our spring can be in that

5
00:00:26,960 --> 00:00:29,830
context is equal to new class.

6
00:00:29,860 --> 00:00:32,290
But example L-Space

7
00:00:35,050 --> 00:00:42,370
application context within of course conflict Daut example semi-colon can go to one important application

8
00:00:42,380 --> 00:00:49,520
context from Spring Framework that Abda package name operate very strict in the conflict or someone

9
00:00:49,520 --> 00:00:53,960
and you know what to do add forward slashes instead of dots.

10
00:00:53,960 --> 00:01:07,610
Replace the dots that follow slashes.

11
00:01:07,780 --> 00:01:09,950
One more to go.

12
00:01:10,220 --> 00:01:18,090
Once we have that allocation context the second step is to get the bean context Daut get being it didn't

13
00:01:18,130 --> 00:01:24,250
double corresponds to the big name which we have used in the conflict or someone the BEEN we are or

14
00:01:24,280 --> 00:01:26,350
we care for is the be Will.

15
00:01:26,350 --> 00:01:27,170
You can also call it.

16
00:01:27,170 --> 00:01:30,420
RB will have used shortcuts for everything.

17
00:01:30,430 --> 00:01:40,270
Use b will and assign it to Arda B or we can assign it to an interface when you send it to the implementation

18
00:01:40,690 --> 00:01:49,570
runtime polymorphism again or to be able to control one do the typecasting add cost to our to be or

19
00:01:50,760 --> 00:01:55,230
B or dot in the motard third place.

20
00:01:55,350 --> 00:01:55,540
The

21
00:01:58,530 --> 00:02:00,210
right click on that.

22
00:02:00,240 --> 00:02:07,910
And then I will explain the flow Java application so spring does that dependency injection for us.

23
00:02:07,930 --> 00:02:11,110
First it goes to the place Armstead which is printing.

24
00:02:11,140 --> 00:02:16,280
Inside are the be all inside the place order we are in walking.

25
00:02:16,690 --> 00:02:19,520
If you go to the implementation we are working to create order.

26
00:02:19,660 --> 00:02:21,890
So first it prints inside our B.

27
00:02:22,300 --> 00:02:32,530
Then the deal gets injected and Darby when police creator springe injects this implementation into the

28
00:02:33,010 --> 00:02:37,680
bill right here and in our will impel.

29
00:02:37,760 --> 00:02:39,090
This is where it goes.

30
00:02:39,120 --> 00:02:45,440
It does the property injection and then we can use but the key is it is injecting any implementation

31
00:02:45,530 --> 00:02:50,000
of this particular interface and this interface can hold any of its implementation.

32
00:02:50,000 --> 00:02:52,740
That is runtime polymorphism.

33
00:02:52,960 --> 00:02:56,010
That is the reason we are seeing.

34
00:02:56,170 --> 00:03:01,150
If you go to our Robbie Williams Palafox we see this then it goes to the order to create order that

35
00:03:01,150 --> 00:03:07,390
is the implementation which is printing inside Aradia will create order and real time applications.

36
00:03:07,390 --> 00:03:12,210
This is where really how all the hibernate and Julie B.C code which you will see in sections later on

37
00:03:13,560 --> 00:03:19,990
how successfully learned how to inject interfaces or how to do dependency injection through interfaces

38
00:03:19,990 --> 00:03:24,210
which is very powerful and used in all real time applications.

