1
00:00:00,230 --> 00:00:05,970
In this lecture you will learn how spring provides loose coupling in our application through runtime

2
00:00:06,090 --> 00:00:07,410
polymorphism.

3
00:00:07,410 --> 00:00:13,470
That is we can inject different implementations of the dependencies at runtime without touching our

4
00:00:13,470 --> 00:00:17,230
core or without changing our dependent classes.

5
00:00:17,250 --> 00:00:21,930
Let's see that we are going to create another implementation of this order.

6
00:00:21,960 --> 00:00:38,800
Deewar impled right click on this package see new class arder you impel to add and they should implement

7
00:00:38,860 --> 00:00:43,240
the audio interface the same interface which the earlier class has implemented

8
00:00:46,710 --> 00:01:00,000
doing this out in the implementation inside to be imported bous create Arta.

9
00:01:00,070 --> 00:01:06,130
So our first of all maybe we wanted to use putting DBC or plain-Jane Ribisi but in here in order D or

10
00:01:06,140 --> 00:01:12,060
in Perl do we might want to use Hibernate or putting data in advanced API.

11
00:01:12,200 --> 00:01:14,130
That is the reason we have to be.

12
00:01:14,570 --> 00:01:21,560
Once we have to be able impellor we need not touch the are the be all because here it's the interface

13
00:01:21,820 --> 00:01:26,100
so go to conflict Bartik someone create another bean.

14
00:01:26,120 --> 00:01:33,420
Copy this for us when the order Deeble been Bastet instead of our idea or impulse it'll be orderly or

15
00:01:33,480 --> 00:01:36,740
impolite to and here call this DA or two.

16
00:01:37,040 --> 00:01:45,890
And when we inject it into the bee will impel use the the word to reference instead of the all the name

17
00:01:45,890 --> 00:01:52,240
remains the same because that is the name inside Arda we will impale right here.

18
00:01:52,610 --> 00:01:55,310
And we inject it we are injecting a different bean.

19
00:01:55,550 --> 00:02:03,040
Let's run the test not just in the test because we are reading the bill and calling the place are the

20
00:02:03,040 --> 00:02:03,700
matter.

21
00:02:03,880 --> 00:02:07,780
And this time the output it still works inside are the be will.

22
00:02:08,120 --> 00:02:16,350
But if you see it says inside order it will embellish to create order or not inside the deal that we

23
00:02:16,480 --> 00:02:19,840
created earlier that is the power of spring.

24
00:02:19,940 --> 00:02:25,230
Spring will look at the configuration file it creates this dependency here.

25
00:02:25,320 --> 00:02:29,200
But but when it does the injection it will inject the will to.

26
00:02:29,260 --> 00:02:33,790
This is the loose coupling without making any changes to our dependant classes.

27
00:02:33,820 --> 00:02:40,690
We can't simply come up with Exxon-Mobile configuration and inject new implementations of the same interface.

