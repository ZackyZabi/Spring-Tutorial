1
00:00:00,180 --> 00:00:06,660
In the previous lecture hall created POJO classes and interfaces in this lecture he will add this dependency

2
00:00:06,930 --> 00:00:10,750
and start injecting beans using this pudding configuration.

3
00:00:11,070 --> 00:00:19,500
Let's get started by going to eclipse to Arabi will impel the art to be wimple should use the art to

4
00:00:19,560 --> 00:00:21,930
be able to do that.

5
00:00:21,970 --> 00:00:30,510
You're going to use arder be able and Carlat be able as I feed this in the same package we are using

6
00:00:30,510 --> 00:00:32,030
that interface here.

7
00:00:32,330 --> 00:00:38,070
You can make this private control will create getter and setter methods.

8
00:00:38,120 --> 00:00:38,980
OK.

9
00:00:39,270 --> 00:00:41,350
Black and blue shift after formatting.

10
00:00:41,850 --> 00:00:50,340
And we can then use this D-Will inside the place are the matter the order art create order or simply

11
00:00:50,430 --> 00:00:56,570
walking to create art or method which right now if you go to the implementation of it open implementation

12
00:00:56,570 --> 00:01:02,390
by hitting control and this method it only prints this much.

13
00:01:02,410 --> 00:01:07,380
So we have successfully added the link between the two classes.

14
00:01:07,810 --> 00:01:09,320
Now let's configure.

15
00:01:09,430 --> 00:01:14,620
By creating this being configuration we are going to create a bean and injected copy of the earlier

16
00:01:14,620 --> 00:01:18,280
conflicts onto this new package open it.

17
00:01:18,820 --> 00:01:21,580
Maximize delete everything.

18
00:01:21,580 --> 00:01:23,040
We are not going to do annotations.

19
00:01:23,040 --> 00:01:31,330
We'll start with the example being the first thing we are going to create always is the dependency.

20
00:01:31,330 --> 00:01:34,110
In this case our Deewar is the dependency.

21
00:01:34,180 --> 00:01:37,240
So let's start with that class is equality.

22
00:01:38,540 --> 00:01:39,440
The Bakkies name

23
00:01:43,370 --> 00:01:49,720
Bastet dot order will impel we how to provide the implementation.

24
00:01:49,740 --> 00:01:52,190
Here are not the interface.

25
00:01:52,190 --> 00:01:55,870
We cannot create objects of the interface and spring cannot do that either.

26
00:01:56,030 --> 00:01:58,980
So you need to provide one of the implementation classes here.

27
00:01:59,090 --> 00:02:05,770
But when we use it we use the interface so we can since this interface is implemented by order to be

28
00:02:05,770 --> 00:02:12,820
able at runtime the spring container use is runtime polymorphism and it can inject any implementation

29
00:02:12,820 --> 00:02:16,740
class in do this kind of object.

30
00:02:17,120 --> 00:02:19,530
That is the power of spring.

31
00:02:19,700 --> 00:02:24,620
Its very loosely coupled if you want to configure another class instead of this which implements the

32
00:02:24,620 --> 00:02:25,370
same interface.

33
00:02:25,370 --> 00:02:27,830
We can do that as well without changing the code.

34
00:02:27,830 --> 00:02:30,840
We can just change the Exxon-Mobile configuration.

35
00:02:30,860 --> 00:02:32,750
I will show you that later.

36
00:02:32,750 --> 00:02:40,670
Class name is equal to that simply call this the ABL blows it right there.

37
00:02:40,760 --> 00:02:49,730
We have the dependency the next bean bean class is required to base the package Daut are to be able

38
00:02:49,820 --> 00:02:58,030
or R to be will impellor always the spring configuration will have implementation classes.

39
00:02:58,050 --> 00:03:09,260
When we create the beans are the be all IMPO mean is equal to be able close it right.

40
00:03:09,260 --> 00:03:18,460
The are we need to inject the dependency been let's use property injection

41
00:03:20,950 --> 00:03:26,500
property name is equal to whatever name we have given in order to be Williams-Bolar that name is Diego

42
00:03:27,850 --> 00:03:38,250
be able and you can use the ref bag here right here ref is equal to B will that name which we have used

43
00:03:38,250 --> 00:03:40,940
here and you can close the property tag right there.

44
00:03:40,950 --> 00:03:43,050
We are converging to format.

45
00:03:43,280 --> 00:03:46,890
So in this letter you have successfully created the dependency we have.

46
00:03:46,920 --> 00:03:54,140
First of all we have used order to be able by defining a field and we have used it inside the place

47
00:03:54,340 --> 00:04:00,250
and then we have come up with the building configuration to create the dependency by using the implementation

48
00:04:00,250 --> 00:04:07,450
of it and then injected it into the order b will be the next lecture will create the test and test it

49
00:04:07,530 --> 00:04:08,020
and doing.

