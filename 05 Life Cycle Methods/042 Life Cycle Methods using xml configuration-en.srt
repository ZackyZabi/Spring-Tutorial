0
00:00.360 --> 00:05.650
In this and the next lecture you will learn how to configure the spring life cycle methods that is the init

1
00:05.730 --> 00:09.130
and destroy methods using xml configuration.

2
00:09.210 --> 00:14.540
We'll do that in three simple steps which you already know will create a spring bean called patient.

3
00:14.540 --> 00:19.980
will use the xml configuration to configure the init and destroy methods and finally 

4
00:19.980 --> 00:21.490
will write a test.

5
00:21.810 --> 00:23.070
Let's get started.

6
00:23.160 --> 00:24.690
go do eclipse

7
00:25.620 --> 00:34.980
New Class call it patient package com dot bharath dot under spring core

8
00:34.980 --> 00:41.750
Let's create a package called LC for life cycle dot xml config

9
00:41.840 --> 00:46.100
They're going to implement lifecycle using xml config finish.

10
00:47.690 --> 00:50.980
double click to maximize this patient will have only one field.

11
00:51.060 --> 00:59.090
Int ID patient ID make it private control one create getters and setters methods

12
01:04.410 --> 01:10.850
next is to create the configuration so you can grab the configuration from ref types config dot xml

13
01:10.870 --> 01:21.030
come back paste it open it clean up all the beans and start using the bean tag to instantiate

14
01:21.030 --> 01:26.870
or create an object of type bean class is equal to patient.

15
01:26.990 --> 01:38.700
Grab the package name in a second go to patient copy the package name come back paste it dot give it a name

16
01:39.170 --> 01:43.710
name is equal to the patient.

17
01:43.710 --> 01:53.040
Lets call it patient use the P schema P colon the name of the field is ID ID is equal to assign a number

18
01:53.550 --> 01:57.520
lets say 1 2 3 close the element right there.

19
01:57.700 --> 02:03.750
So so far we have instantiated the bean and done the injection of one and only one field we haven't

20
02:03.750 --> 02:08.500
used the init and destroy methods yet to use the init and destroy

21
02:08.550 --> 02:16.490
We need to go back to patient create a init method should start with public the return type should

22
02:16.490 --> 02:17.150
be void

23
02:17.150 --> 02:19.970
the name of the method need not be init.

24
02:20.000 --> 02:21.170
It can be anything.

25
02:21.320 --> 02:23.090
Let's say high.

26
02:23.480 --> 02:25.930
No parameters within the body.

27
02:25.940 --> 02:26.660
add a sysout

28
02:29.650 --> 02:34.090
inside hi method.

29
02:34.360 --> 02:40.510
So this is our init method it's going to act as our init method also code the destroy method

30
02:40.510 --> 02:41.310
public.

31
02:41.350 --> 02:44.080
void no return type instead of destroy.

32
02:44.090 --> 02:46.790
I'm going to call it bye the name can be anything.

33
02:46.810 --> 02:48.910
No parameters sys out

34
02:51.820 --> 02:54.640
inside bye method.

35
02:57.650 --> 03:01.020
save it so we have two methods which will act as init and destroy.

36
03:01.020 --> 03:07.310
Now we need to configure them in the config dot xml will go back to the bean element to configure

37
03:07.370 --> 03:08.310
the init method.

38
03:08.420 --> 03:11.680
We use an attribute called init.

39
03:11.900 --> 03:15.190
Hypen method is equal to.

40
03:15.320 --> 03:22.460
within double coats we need to provide the name of the method  just the name which is hi and for destroy

41
03:22.500 --> 03:32.130
as you can guess destroy hyphen method is equal to within double quotes bye save it and that's it

42
03:32.130 --> 03:38.970
you can create our test class can grab the test class from the ref types.

43
03:39.110 --> 03:40.150
Copy that.

44
03:40.490 --> 03:42.700
Paste it here open it.

45
03:42.700 --> 03:44.060
We need to change the packages.

46
03:44.060 --> 03:48.540
The class names etc. instead of student it will be patient.

47
03:48.720 --> 03:55.440
That's the bean that's going to come out of spring container change this name to patient as well.

48
03:56.280 --> 04:03.520
Instead of ref types it's springcore core colon or forward slash RC slash xml config that is

49
04:03.520 --> 04:04.320
the package name.

50
04:04.330 --> 04:12.980
And then the config dot xml changed this name to patient the variable name should be patient.

51
04:13.090 --> 04:16.000
We haven't implemented  tostring method on patient.

52
04:16.000 --> 04:17.150
We can do that.

53
04:17.410 --> 04:25.110
Go to patient go to source generate tostring go back to source.

54
04:25.130 --> 04:27.700
I just need the tostring method.

55
04:27.800 --> 04:28.900
hit OK.

56
04:29.420 --> 04:37.450
control shift F to format lets run our test so successfully you have configured the init and destroy methods

57
04:37.560 --> 04:40.930
which are hi and bye let's run that test and see the output

58
04:44.050 --> 04:46.500
run as java application.

59
04:46.640 --> 04:47.480
There is an exception.

60
04:47.480 --> 04:48.500
Let's see what it is

61
04:53.360 --> 05:01.160
it could not find the Config dot xml com bharath spring spring core RC xml config

62
05:01.190 --> 05:03.100
Let's check the package if it's correct.

63
05:05.730 --> 05:15.440
It's LC not RC So go back to the test and change it from RC to LC for lifecycle.

64
05:17.330 --> 05:18.680
Run the test again.

65
05:19.740 --> 05:25.830
This time we will see that it says inside hi and then it prints the patient object.

66
05:25.830 --> 05:34.630
So before the object itself is injected as soon as the object is created and once the setter methods

67
05:34.620 --> 05:43.520
are invoked the init method is invoked. So to prove that this hi method is being invoked after the setter methods are called

68
05:43.520 --> 05:53.640
go to patient and inside the setter method for ID right here add a sysout 

69
05:53.640 --> 05:59.500
sysout inside the setter method save it come back run the test again.

70
06:00.720 --> 06:07.750
So spring creates the object called the setter methods and then invokes the init method 

71
06:07.890 --> 06:11.620
And then it creates the rest of the object.

72
06:12.090 --> 06:18.510
But one thing you notice is that our destroy method is not invoked yet this here inside bye method

73
06:18.510 --> 06:20.050
is not being printed.

74
06:20.220 --> 06:21.340
There is a reason for it.

75
06:21.360 --> 06:23.760
We need to enable something in spring.

76
06:23.760 --> 06:27.460
We need to enable a hook in spring for the destroy method to be invoked.

77
06:27.480 --> 06:29.590
We will see that in the next lecture.

78
06:29.850 --> 06:34.920
So to summarize we have done a lot in this lecture we have created a patient object you have created a

79
06:34.920 --> 06:41.700
couple of methods which will act as init and then destroy and in the config dot xml when you create that bean

80
06:42.360 --> 06:48.630
using the bean element we have also configured the init and destroy methods using init method and destroy

81
06:48.630 --> 06:55.500
method attributes have successfully created a test and seen it all in action except for the destroy

82
06:55.920 --> 06:58.760
not being called that which you will fix in the next lecture.