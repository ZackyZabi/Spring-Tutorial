1
00:00:00,540 --> 00:00:06,900
You have created a service class with a business method called Multiply created aspect which is a class

2
00:00:06,960 --> 00:00:14,010
mocked it with the ET aspect annotation and to advise us inside it then use it to point that expression

3
00:00:15,320 --> 00:00:20,560
to express that particular advice or to match that particular advice to a business matter.

4
00:00:20,840 --> 00:00:25,630
So this blog before will be invoked just before business method is executed.

5
00:00:25,940 --> 00:00:27,670
Which is my play in this case.

6
00:00:27,800 --> 00:00:33,560
And this law after really being walked right after the matter is invoked it a lot of worry about the

7
00:00:33,560 --> 00:00:34,670
method execution.

8
00:00:34,670 --> 00:00:39,130
As soon as the multiply method is called log Okkervil be invoked.

9
00:00:39,410 --> 00:00:45,290
So you can change it from after the method of execution to offer them at their invocation because it

10
00:00:45,290 --> 00:00:54,510
will not wait for them at that execution to complete go to Best Before you run it and to sort this out

11
00:00:54,530 --> 00:00:55,690
display the result.

12
00:00:56,920 --> 00:01:04,270
Otherwise would not see the result on the council and close the bracketed and formatted on that based

13
00:01:04,270 --> 00:01:11,020
on that explain the flow right click run as Java application and the output days before calling them

14
00:01:11,020 --> 00:01:11,540
a third.

15
00:01:11,560 --> 00:01:14,150
That is the first advice after them.

16
00:01:14,150 --> 00:01:15,010
Third invocation.

17
00:01:15,010 --> 00:01:21,150
That is the second log after advice which we have marked using it after annotation.

18
00:01:21,280 --> 00:01:23,820
And finally there is Albee's displayed.

19
00:01:24,400 --> 00:01:26,820
So the flow here the spring container.

20
00:01:26,860 --> 00:01:32,740
Which is the classpath application context is loaded down and that is created it will use this configuration

21
00:01:32,740 --> 00:01:40,330
file conflict direct someone within which we have the IT WILL BE aspect Jarkko proxy which tells spring

22
00:01:40,350 --> 00:01:48,600
that we are doing the aspect Jey annotation based it will be hard to defined our Beanz the product service

23
00:01:48,990 --> 00:01:51,290
as well as the logging aspect.

24
00:01:51,630 --> 00:01:58,490
So spending will create instances of these beans in our test we are retrieving the bean and then we

25
00:01:58,490 --> 00:02:05,520
are in walking the multiply method as soon as we do that the advisors will be applied by spring.

26
00:02:05,600 --> 00:02:12,710
Using aspect J because we have used the point Curt expressions that will qualify the multiply motard

27
00:02:12,800 --> 00:02:15,680
for these two advisors we have defined here.

28
00:02:15,680 --> 00:02:20,930
That is why we have seen before calling them at their first then after them at their invocation.

29
00:02:20,960 --> 00:02:24,880
And finally the result that comes back is being displayed.

