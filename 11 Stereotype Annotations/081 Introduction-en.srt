1
00:00:00,240 --> 00:00:07,110
So far you have used xml configuration to create objects and to do dependency injection. In

2
00:00:07,100 --> 00:00:07,390
this,

3
00:00:07,440 --> 00:00:13,650
and the next few lectures you will learn how to use the stereotype annotations from Spring to create

4
00:00:13,650 --> 00:00:18,540
objects and to inject them. We'll do it in two simple steps.

5
00:00:18,610 --> 00:00:25,130
First, we'll mark our classes with the @Component stereotype annotation from Spring.

6
00:00:25,450 --> 00:00:32,890
The stereotype annotations are used to create objects. This is equivalent to using the bean tag in the

7
00:00:32,980 --> 00:00:34,270
XML.

8
00:00:34,480 --> 00:00:40,120
Once we do that, the second step is to use one single XML element in the configuration file called

9
00:00:40,530 --> 00:00:48,250
context:component-scan. Using this element, we tell the Spring container which all packages it needs

10
00:00:48,250 --> 00:00:52,580
to scan for classes marked with this component annotation.

11
00:00:52,780 --> 00:00:58,240
Here, we use the base-package attribute and we are telling the Spring container that it should

12
00:00:58,270 --> 00:01:07,630
scan a package called com.bharath and all its subpackages for classes marked with @Component. Whatever

13
00:01:07,630 --> 00:01:08,810
package we give here,

14
00:01:08,950 --> 00:01:13,680
Spring container will also search that package as well as it's subpackages

15
00:01:13,750 --> 00:01:20,160
for classes marked with the @Component annotation. For example, here,

16
00:01:20,940 --> 00:01:31,110
I have all these packages the parent and the subpackages. com has one, three, four, two, five, six as the packages and all

17
00:01:31,110 --> 00:01:33,270
these packages have classes.

18
00:01:33,300 --> 00:01:41,420
So if I use com.one as the base package, then the Spring container will scan this package

19
00:01:41,410 --> 00:01:51,210
com which has a class A, then it will scan one for class B and also one subpackage which are three and

20
00:01:51,210 --> 00:01:54,860
four and it'll find classes C and D as well.

21
00:01:55,200 --> 00:02:02,850
If I use com.two.five.F then it will only scan the five package.

22
00:02:02,850 --> 00:02:07,490
It doesn't have any subpackages, so it will only find F, class F.

23
00:02:07,890 --> 00:02:14,670
And if I use com as the base package, then it will scan all the subpackages. So it will find A, B, C,

24
00:02:14,670 --> 00:02:16,980
D, E, F, G.

25
00:02:17,040 --> 00:02:20,200
That is how the scanning works.

26
00:02:20,270 --> 00:02:22,020
The container by default,

27
00:02:22,360 --> 00:02:27,580
when we mark a class with @Component annotation, it will create an object like this.

28
00:02:27,590 --> 00:02:36,170
That is, it will use the class name for the object reference name and it uses camel case to name it, to

29
00:02:36,170 --> 00:02:41,660
name the reference variable. So when we read the object in our test or anywhere in our application, we

30
00:02:41,660 --> 00:02:47,290
should use the camel case to retrieve that object from Spring.

31
00:02:47,320 --> 00:02:51,360
Last but not least, we can use the @Component annotation,

32
00:02:51,370 --> 00:02:54,170
ofcourse only on the classes that we create.

33
00:02:54,280 --> 00:03:00,130
We cannot use it on the inbuilt classes like string etc; are third party classes because that code is

34
00:03:00,130 --> 00:03:01,240
already compiled.

35
00:03:01,270 --> 00:03:03,930
We don't have access to the source code.

36
00:03:04,390 --> 00:03:11,500
So to summarize, we use the @Component scan to mark our classes and then we define a configuration

37
00:03:11,500 --> 00:03:16,960
in the Spring configuration, through which we tell the Spring container which all classes it needs to

38
00:03:16,960 --> 00:03:21,140
scan and create objects for. In the next few lectures,

39
00:03:21,160 --> 00:03:22,970
you will see these in action.

